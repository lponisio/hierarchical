options(error = recover)
5
params
Q
0
0
q('no')
znodes
znodes
Rmodel$getNodeNames(topOnly = TRUE)
names(ss.ms.opt2)
names(ss.ms.opt2[[1]])
names(ss.ms.opt2[[1]][['summary']])
names(ss.ms.opt2[[1]][['efficiency']])
niter
nthin
customSpec$monitors
ss.ms.opt2[[1]][['efficiency']]
ss.ms.opt2[[1]][['summary']]
q('no')
ls()
ls(ss.ms.orig)
ls(ss.ms.orig[[1]])
ls(ss.ms.orig[[1]]$samples)
ls(ss.ms.orig[[1]][['samples']])
class(ss.ms.orig[[1]][['samples']])
dim(ss.ms.orig[[1]][['samples']])
names(ss.ms.orig[[1]][['samples']])
dimnames(ss.ms.orig[[1]][['samples']])
dimnames(ss.ms.orig[[1]]$samples)
(ss.ms.orig[[1]]$samples)
dim(ss.ms.orig[[1]]$samples[1,,])
cor(t(ss.ms.orig[[1]]$samples[1,,]))
ss.ms.orig[[1]]$efficiency
ls()
ss.ms.orig[[1]]$summary
plot(ss.ms.orig[[1]]$samples[1,'phi[1]',], pch='.')
acf(ss.ms.orig[[1]]$samples[1,'phi[1]',])
hist(ss.ms.orig[[1]]$samples[1,'phi[1]',])
ls()
ss.ms.orig[[1]]$summary[1,'efficiency',]
ss.ms.opt2b[[1]]$summary[1,'efficiency',]
cbind(ss.ms.orig[[1]]$summary[1,'efficiency',], ss.ms.opt2b[[1]]$summary[1,'efficiency',])
cbind(ss.ms.opt2[[1]]$summary[1,'efficiency',], ss.ms.opt2b[[1]]$summary[1,'efficiency',])
sum(ss.ms.opt2[[1]]$summary[1,'efficiency',] > ss.ms.opt2b[[1]]$summary[1,'efficiency',])
hist(ss.ms.orig[[1]]$samples[1,'p[3]',])
hist(ss.ms.orig[[1]]$samples[1,'psi1',])
hist(ss.ms.orig[[1]]$samples[1,'p[3]',])
hist(ss.ms.orig[[1]]$samples[1,'psi1',])
sum(ss.ms.opt2[[1]]$summary[1,'ess',] > ss.ms.opt2b[[1]]$summary[1,'ess',])
cbind(ss.ms.opt2[[1]]$summary[1,'ess',] > ss.ms.opt2b[[1]]$summary[1,'ess',])
cbind(ss.ms.opt2[[1]]$summary[1,'ess',], ss.ms.opt2b[[1]]$summary[1,'ess',])
ss.ms.occ.all <- combine_MCMC_comparison_results(ss.ms.orig.jags[[1]],
                                                 ss.ms.orig[[1]],
                                                 ss.ms.opt11[[1]],
                                                 ss.ms.opt2[[1]],
                                                 ss.ms.opt2b[[1]],
                                                 ss.ms.opt3[[1]],
                                                 name = "ss.ms" )
q('no')
getwd()
library(nimble)
test <- configureMCMC(input1, autoBlock = TRUE)
Rmodel <- nimbleModel(ss.ms.occ, constants=constants,
+                data=model.data,
+                inits=inits)
Rmodel <- nimbleModel(ss.ms.occ, constants=constants,
                data=model.data,
                inits=inits)
test <- configureMCMC(input1, autoBlock = TRUE)
test <- configureMCMC(Rmodel, autoBlock = TRUE)
q('no')
library(nimble)
muSc2muVar(c(.6, .2))
muVar2alpha(muSc2muVar(c(.6, .2)))
muVar2alpha(muSc2muVar(c(.6, .2)))
muSc2alpha(c(.6, .2))
nf_getM(c(.6,.2), 4)
nf_getM(c(.6,.2), 4)
nf_getM(c(.6,.2), 4)
cnf_getM <- compileNimble(nf_getM)
cnf_getM <- compileNimble(nf_getM)
cnf_getM <- compileNimble(nf_getM)
cnf1 <- compileNimble(nf_muSc2muVar)
cnf1 <- compileNimble(nf_muVar2alpha)
cnf1 <- compileNimble(nf_muSc2alpha)
cnf_getM <- compileNimble(nf_getM)
cnf_getM <- compileNimble(nf_getM)
cnf_getM <- compileNimble(nf_getM)
cnf_getM(c(0.6, .2), 4)
cnf_getM(c(0.6, .2), 4)
getM(c(0.6, .2), 4)
getM(c(0.6, .2), 4, 'beta')
getM(c(0.6, .2), 4, 'beta')
nf_getM(c(0.6, .2), 4)
cnf_getM <- compileNimble(nf_getM)
cnf_getM <- compileNimble(nf_getM)
nf_getM(c(0.6, .2), 4)
cnf_getM(c(0.6, .2), 4)
q('no')
c
c
c
cm$
x
cm$x <- rnorm(3)
cm$x
q('no')
Rmodel <- nimbleModel(code=ss.ms.occ,
               constants=constants,
               data=model.data,
               inits=inits)
Rmcmc <- buildMCMC(customSpec)
compiled <- compileNimble(Rmodel, Rmcmc)
compiled$Rmcmc$run(10000)
tempdir()
compiled <- compileNimble(Rmodel, Rmcmc, resetFunctions = TRUE)
Rmodel <- nimbleModel(code=ss.ms.occ,
               constants=constants,
               data=model.data,
               inits=inits)
compiled <- compileNimble(Rmodel, Rmcmc, resetFunctions = TRUE)
q('no')
Rmodel <- nimbleModel(code=ss.ms.occ,
               constants=constants,
               data=model.data,
               inits=inits)
Rmcmc <- buildMCMC(customSpec)
compiled <- compileNimble(Rmodel, Rmcmc, resetFunctions = TRUE)
compiled$Rmcmc$run(10000)
q('no')
