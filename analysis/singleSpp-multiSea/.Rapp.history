rm(list=ls())#
library(nimble)#
setwd("~/Dropbox/nimble/occupancy/analysis/spatial")#
source('../all/plotting.R')#
save.dir <-  "../../../saved/spatial/saved"#
#
## original model jags and nimble#
load(file=file.path(save.dir, "orig.Rdata"))#
#
## vanilla nimble and auto block#
load(file=file.path(save.dir, "opt1.Rdata"))#
#
## ## custom sampler for zs, slice for other parms#
load(file=file.path(save.dir, "opt2.Rdata"))#
#
## ## rename results#
sp.opt2[[1]] <- rename_MCMC_comparison_method('nimbleOpt2',#
                                              'AF slice',#
                                              comparison=sp.opt2[[1]])#
## compare mcmcs#
sp.occ.all <- combine_MCMC_comparison_results(## sp.orig[[1]],#
                                              ## sp.opt1[[1]],#
                                              sp.opt2[[1]],#
                                              name = "sp" )#
make_MCMC_comparison_pages(sp.occ.all,#
                           dir=file.path(save.dir,#
                                         "../figures/comparisons"))#
#
checkChains(sp.occ.all[[1]]$samples,#
            f.path = file.path(save.dir,#
                               "../figures/chains/%s.pdf"))#
## $logDelta#
## [1] -2.302585#
#
## $logSigma#
## [1] 2.079442#
#
## $alpha#
## [1] 5#
#
## $p#
## [1] 0.8
rm(list=ls())#
setwd("~/Dropbox/nimble/occupancy/analysis/singleSpp-multiSea")#
#
source('src/initialize.R')#
set.seed(444)#
data <- genDynamicOccData()#
model.input <- prepModDataOcc(data)
model.input
model.input$inits
rm(list=ls())#
setwd("~/Dropbox/nimble/occupancy/analysis/singleSpp-multiSea")#
#
source('src/initialize.R')#
set.seed(444)#
data <- genDynamicOccData()#
model.input <- prepModDataOcc(data)
rm(list=ls())#
setwd("~/Dropbox/nimble/occupancy/analysis/singleSpp-multiSea")#
#
source('src/initialize.R')#
set.seed(444)#
data <- genDynamicOccData()#
model.input <- prepModDataOcc(data)
niter
rm(list=ls())#
setwd('~/Dropbox/nimble/occupancy/analysis/singleSpp-multiSea')#
#
source('src/initialize.R')#
set.seed(444)#
data <- genDynamicOccData()#
model.input <- prepModDataOcc(data)#
#
## *********************************************************************#
##  Multi-season occupancy model#
## *********************************************************************#
#
ss.ms.occ <- nimbleCode({#
    ## Specify priors#
    psi1 ~ dunif(0, 1)#
#
    for(year in 1:(nyear-1)){#
        phi[year] ~ dunif(0, 1)#
        gamma[year] ~ dunif(0, 1)#
        p[year] ~ dunif(0, 1)#
    }#
    p[nyear] ~ dunif(0, 1)#
#
    ## Ecological submodel: Define state conditional on parameters#
    for (site in 1:nsite){#
        z[site,1] ~ dbern(pssite1)#
        for (year in 2:nyear){#
            muZ[site,year]<- z[site,year-1]*phi[year-1] +#
                (1-z[site,year-1])*gamma[year-1]#
            z[i,year] ~ dbern(muZ[site,year])#
        }#
    }#
#
    ## Observation model#
    for (site in 1:nsite){#
        for (rep in 1:nrep){#
            for (year in 1:nyear){#
                muy[site,rep,year] <- z[site,year]*p[year]#
                y[site,rep,year] ~ dbern(muy[site,rep,year])#
            }#
        }#
    }#
#
})#
#
input1 <- c(code=ss.ms.occ,#
            model.input)
rm(list=ls())#
setwd('~/Dropbox/nimble/occupancy/analysis/singleSpp-multiSea')#
#
source('src/initialize.R')#
set.seed(444)#
data <- genDynamicOccData()#
model.input <- prepModDataOcc(data)#
#
## *********************************************************************#
##  Multi-season occupancy model#
## *********************************************************************#
#
ss.ms.occ <- nimbleCode({#
    ## Specify priors#
    psi1 ~ dunif(0, 1)#
#
    for(year in 1:(nyear-1)){#
        phi[year] ~ dunif(0, 1)#
        gamma[year] ~ dunif(0, 1)#
        p[year] ~ dunif(0, 1)#
    }#
    p[nyear] ~ dunif(0, 1)#
#
    ## Ecological submodel: Define state conditional on parameters#
    for (site in 1:nsite){#
        z[site,1] ~ dbern(pssite1)#
        for (year in 2:nyear){#
            muZ[site,year]<- z[site,year-1]*phi[year-1] +#
                (1-z[site,year-1])*gamma[year-1]#
            z[i,year] ~ dbern(muZ[site,year])#
        }#
    }#
#
    ## Observation model#
    for (site in 1:nsite){#
        for (rep in 1:nrep){#
            for (year in 1:nyear){#
                muy[site,rep,year] <- z[site,year]*p[year]#
                y[site,rep,year] ~ dbern(muy[site,rep,year])#
            }#
        }#
    }#
#
})#
#
input1 <- c(code=ss.ms.occ,#
            model.input)
MCMCdefs.opt1 <- list('nimbleOpt1' = quote({#
    customSpec <- configureMCMC(Rmodel)#
    customSpec$removeSamplers('z')#
    customSpec$addSampler('z', type = 'sampler_latentSub',#
                          control = list(leaveOutProportion = 0.5,#
                                         control = list()))#
    customSpec#
}))#
## *********************************************************************#
ss.ms.opt1 <- compareMCMCs(input1,#
                           MCMCs=c('nimbleOpt1'),#
                           MCMCdefs = MCMCdefs.opt1,#
                           niter= niter,#
                           burnin = burnin,#
                           summary=FALSE,#
                           check=FALSE)#
#
save(ss.ms.opt1, file=file.path(save.dir, 'opt1.Rdata'))
ss.ms.opt1 <- compareMCMCs(input1,#
                           MCMCs='nimble',#
                           niter= niter,#
                           burnin = burnin,#
                           summary=FALSE,#
                           check=FALSE)
rm(list=ls())#
setwd("~/Dropbox/nimble/occupancy/analysis/singleSpp-multiSea")#
source('src/initialize.R')#
#
set.seed(444)#
data <- genDynamicOccData()#
model.input <- prepModDataOcc(data)#
## *********************************************************************#
##  original multi-season occupancy : JAGS & NIMBLE#
## *********************************************************************#
#
ss.ms.occ <- nimbleCode({#
  ## Specify priors#
  psi1 ~ dunif(0, 1)#
#
  for(k in 1:(nyear-1)){#
    phi[k] ~ dunif(0, 1)#
    gamma[k] ~ dunif(0, 1)#
    p[k] ~ dunif(0, 1)#
  }#
  p[nyear] ~ dunif(0, 1)#
#
  ## Ecological submodel: Define state conditional on parameters#
  for (i in 1:nsite){#
    z[i,1] ~ dbern(psi1)#
    for (k in 2:nyear){#
      muZ[i,k]<- z[i,k-1]*phi[k-1] + (1-z[i,k-1])*gamma[k-1]#
      z[i,k] ~ dbern(muZ[i,k])#
    }#
  }#
#
  ## Observation model#
  for (i in 1:nsite){#
    for (j in 1:nrep){#
      for (k in 1:nyear){#
        muy[i,j,k] <- z[i,k]*p[k]#
        y[i,j,k] ~ dbern(muy[i,j,k])#
      }#
    }#
  }#
#
})#
#
## *********************************************************************#
## orginal model in nimble#
#
input1 <- c(code=ss.ms.occ,#
            model.input)#
ss.ms.orig <- compareMCMCs(input1,#
                           MCMCs=c('jags', 'nimble'),#
                           niter=niter,#
                           burnin = burnin,#
                           summary=FALSE,#
                           check=FALSE)#
#
save(ss.ms.orig, file=file.path(save.dir, "orig.Rdata"))
