rm(list=ls())#
setwd("~/Dropbox/nimble/occupancy/analysis/spatial")#
source('src/initialize.R')#
library(rjags)#
load.module("msm")#
#
set.seed(444)#
dats <- genSpatialOccData()#
model.input <- prepModData(dats$data, dats$y, dats$distance,#
                           nsite=100)#
#
mexp <- nimbleFunction(#
  run = function(A = double(2)){#
    returnType(double(2))#
    outMat <- exp(A)#
    return(outMat)#
  })#
#
sp.mod <- nimbleCode({#
  ## priors#
  delta ~ dunif(0.01, 10)#
  sigma ~ dunif(0, 10)#
  p ~ dunif(0, 1)#
  alpha ~ dnorm(0, 0.001)#
  b1 ~ dnorm(0, 0.001)#
#
  rho[1:nsite] ~ dmnorm(zeros[1:nsite],#
                        D.tau[1:nsite, 1:nsite])#
  ## Likelihood#
  ## Ecological model for true occurrence#
  for (i in 1:nsite) {#
    z[i] ~ dbern(psi[i])#
    logit(psi[i]) <- alpha + b1*elev[i] + rho[i]#
    p.eff[i] <- z[i] * p#
#
    ## Observation model for replicated detection/nondetection#
    ## observations#
    for (j in 1:nreps) {#
      y[i,j] ~ dbern(p.eff[i])#
    }#
  }#
#
  ## create covariance matrix based on distances (must be 1/cov for#
  ## JAGS)#
#
  ## mexp is jags's version fo matrix exponentiation, very sensitive #
  ## D.cov[1:nsite, 1:nsite]  <- (sigma^2)*mexp(-delta*D[1:nsite, 1:nsite])#
#
  for(i in 1:nsite){#
    for(j in 1:nsite){#
      temp.cov[i, j] <- -delta*D[i, j]#
      D.cov[i, j]  <- (sigma^2)*exp(temp.cov[i, j])#
    }#
  }#
  D.tau[1:nsite, 1:nsite] <- inverse(D.cov[1:nsite, 1:nsite])#
})#
input1 <- c(code=sp.mod,#
            model.input)#
#
## *********************************************************************#
## opt 1:vanilla nimble and auto block#
## *********************************************************************#
#
sp.orig <- compareMCMCs(input1,#
                        MCMCs=c("jags"),#
                        niter=niter,#
                        burnin = burnin,#
                        summary=FALSE,#
                        check=FALSE)#
#
save(sp.orig, file=file.path(save.dir, "orig.Rdata"))
rm(list=ls()) #
setwd('~/Dropbox/nimble/occupancy/analysis/multiSpp-singleSea')#
#
source('src/initialize.R')#
## don't agument data#
n.zeroes <- 0#
model.input <- prepMutiSpData(survey.data,#
                              survey.dates,#
                              species.groups,#
                              habitat,#
                              n.zeros)#
#
## *********************************************************************#
## multi-species site-occupancy models: vectorized with custom#
## function to remove zs#
## *********************************************************************#
#
ms.ss.occ <- nimbleCode({#
  ## Define prior distributions for community-level model parameters#
  cato.occ.mean ~ dunif(0,1)#
  mu.ucato <- log(cato.occ.mean) - log(1-cato.occ.mean)#
#
  fcw.occ.mean ~ dunif(0,1)#
  mu.ufcw <- log(fcw.occ.mean) - log(1-fcw.occ.mean)#
#
  cato.det.mean ~ dunif(0,1)#
  mu.vcato <- log(cato.det.mean) - log(1-cato.det.mean)#
#
  fcw.det.mean ~ dunif(0,1)#
  mu.vfcw <- log(fcw.det.mean) - log(1-fcw.det.mean)#
#
  ## random effects#
  sigma.ucato ~ dunif(0, 100)#
  sigma.ufcw ~ dunif(0, 100)#
  mu.a1 ~ dnorm(0, 0.001)#
  sigma.a1 ~ dunif(0, 100)#
  mu.a2 ~ dnorm(0, 0.001)#
  sigma.a2 ~ dunif(0, 100)#
  mu.a3 ~ dnorm(0, 0.001)#
  sigma.a3 ~ dunif(0, 100)#
  mu.a4 ~ dnorm(0, 0.001)#
  sigma.a4 ~ dunif(0, 100)#
#
  sigma.vcato ~ dunif(0, 100)#
  sigma.vfcw ~ dunif(0, 100)#
  mu.b1 ~ dnorm(0, 0.001)#
  sigma.b1 ~ dunif(0, 100)#
  mu.b2 ~ dnorm(0, 0.001)#
  sigma.b2 ~ dunif(0, 100)#
  for (i in 1:(num.species)) {#
    ## Create priors for species i from the community level prior#
    ## distributions#
#
    u.cato[i] ~ dnorm(mu.ucato, sd=sigma.ucato)#
    u.fcw[i] ~ dnorm(mu.ufcw, sd=sigma.ufcw)#
    a1[i] ~ dnorm(mu.a1, sd=sigma.a1)#
    a2[i] ~ dnorm(mu.a2, sd=sigma.a2)#
    a3[i] ~ dnorm(mu.a3, sd=sigma.a3)#
    a4[i] ~ dnorm(mu.a4, sd=sigma.a4)#
#
    v.cato[i] ~ dnorm(mu.vcato, sd=sigma.vcato)#
    v.fcw[i] ~ dnorm(mu.vfcw, sd=sigma.vfcw)#
    b1[i] ~ dnorm(mu.b1, sd=sigma.b1)#
    b2[i] ~ dnorm(mu.b2, sd=sigma.b2)#
#
    ## vectorize the calculation of psi.#
    logit(psi[1:num.points,i]) <-#
      u.cato[i]*(1-habitat.ind[1:num.points]) +#
        u.fcw[i]*habitat.ind[1:num.points] +#
          a1[i]*ufc.linear[1:num.points] +#
            a2[i]*ufc.quadratic[1:num.points] +#
              a3[i]*ba.linear[1:num.points] +#
                a4[i]*ba.quadratic[1:num.points]#
    ## vectorized calculation#
    mu.psi[1:num.points,i] <- psi[1:num.points, i]#
#
    ## For our purpose a better way to write this way is to#
    ## not worry that some elements of date.linear and date.quadratic#
    ## aren't used, since the benefit of vectorizing the computation#
    ## should be much greater than the cost of a few extra elements#
    logit(p[1:num.points, 1:max.num.reps, i]) <-#
      (v.cato[i]*(1-habitat.ind[1:num.points]) +#
       v.fcw[i]*habitat.ind[1:num.points]) %*%#
         asRow(onesRow[1, 1:max.num.reps])+#
           b1[i]*date.linear[1:num.points,1:max.num.reps] +#
             b2[i]*date.quadratic[1:num.points,1:max.num.reps]#
#
    ## user defined distribution to combine the bernoulli occupancy#
    ## and detection events.  We can also make this is a single#
    ## compuation for the entire matrix of locations-x-visits, for#
    ## each species (i)#
    X[1:num.points, 1:max.num.reps, i] ~ dBernDetectionMatrix(#
      occProb = mu.psi[1:num.points,i],#
      detectionProb = p[1:num.points, 1:max.num.reps,i],#
      numReps = num.reps[1:num.points])#
  }#
  ## Derived quantities:#
  ## for(j in 1:num.points){#
  ##   N.site[j]<- sum(mu.psi[j,1:(num.species)])#
  ##   N.ground[j]<- sum(mu.psi[j,1:num.species] * ground[1:num.species])#
  ##   N.mid[j]<- sum(mu.psi[j,1:num.species] * mid[1:num.species])#
  ## }#
})#
input1 <- c(code=ms.ss.occ, model.input)
occ.R.model <- nimbleModel(code=ms.ss.occ,#
                           constants=input1$constants,#
                           data=input1$data,#
                           inits=input1$inits,#
                           check=FALSE)#
#
occ.mcmc <- buildMCMC(occ.R.model)#
occ.C.model <- compileNimble(occ.R.model)#
occ.C.mcmc <- compileNimble(occ.mcmc, project = occ.R.model)#
niter <- 1000#
occ.C.mcmc$run(niter)
source('../cppp/src/calcCPPP.R', chdir = TRUE)#
options(mc.cores=1)
test.opt2 <- generateCPPP(occ.R.model,#
                          occ.C.model,#
                          occ.C.mcmc,#
                          occ.mcmc,#
                          dataName = 'X',#
                          paramNames = input1$monitors, #
                          MCMCIter = niter, #
                          NSamp = 10^2,#
                          NPDist = 10^1,#
                          burnInProportion = 0.10,#
                          thin = 1,#
                          averageParams = TRUE,#
                          discFuncGenerator=likeDiscFuncGenerator,#
                          returnChains=TRUE)
names(test.opt2)
test.opt2$cppp
test.opt2$obs.ppp
source('../cppp/src/calcCPPP.R', chdir = TRUE)#
options(mc.cores=1)#
#
test.opt2 <- generateCPPP(occ.R.model,#
                          occ.C.model,#
                          occ.C.mcmc,#
                          occ.mcmc,#
                          dataName = 'X',#
                          paramNames = input1$monitors, #
                          MCMCIter = niter, #
                          NSamp = 10^2,#
                          NPDist = 10^1,#
                          burnInProportion = 0.10,#
                          thin = 1,#
                          averageParams = TRUE,#
                          discFuncGenerator=likeDiscFuncGenerator,#
                          returnChains=TRUE)
test.opt2$obs.pp
test.opt2$cppp
names(test.opt2)
test.opt2$sim.cpp.dist
test.opt2$chain.diagnostics
rm(list=ls())#
#
library(nimble)#
library(coda)#
#
setwd('~/Dropbox/nimble/occupancy/analysis/multiSpp-singleSea')#
source('../all/plotting.R')#
save.dir <-  "../../../saved/multiSpp-singleSea/saved"#
#
## original model jags and nimble#
load(file=file.path(save.dir, "orig.Rdata"))#
#
## vectorized, likelihood for latent state, derived quantity#
## calculation#
load(file=file.path(save.dir, "opt1.Rdata"))#
#
## option 1 + custom block sampler on species random effect for each#
## species#
load(file=file.path(save.dir, "opt2.Rdata"))#
#
## ## option 1 + custom block sampler on species random effect for each#
## ## random effect type#
## load(file=file.path(save.dir, "opt3.Rdata")#
#
## option 1 + sigma sampler on random effects#
load(file=file.path(save.dir, "opt4.Rdata"))#
ms.ss.orig[[1]] <- rename_MCMC_comparison_method(c('nimble', 'jags'),#
                                                 c('NIMBLE-latent',#
                                                   'JAGS-latent'),#
                                                 comparison=ms.ss.orig[[1]])#
#
ms.ss.opt1[[1]] <- rename_MCMC_comparison_method(c('nimble',#
                                                   "autoBlock"),#
                                                 c('filter',#
                                                   'filter + autoblock'),#
                                                 comparison=ms.ss.opt1[[1]])#
ms.ss.opt2[[1]] <- rename_MCMC_comparison_method('nimbleOpt2',#
                                                 'filter + sp. block',#
                                                 comparison=ms.ss.opt2[[1]])#
## ms.ss.opt3[[1]] <- rename_MCMC_comparison_method('nimbleOpt3',#
##                                                  'block_2',#
##                                                  comparison=ms.ss.opt3[[1]])#
ms.ss.opt4[[1]] <- rename_MCMC_comparison_method('nimbleOpt4',#
                                                 'sigma sampler',#
                                                 comparison=ms.ss.opt4[[1]])#
#
## compare mcmcs#
ms.ss.occ.all <- combine_MCMC_comparison_results(ms.ss.orig[[1]],#
                                                 ms.ss.opt1[[1]],#
                                                 ms.ss.opt2[[1]],#
                                                 ## ms.ss.opt3[[1]],#
                                                 ## ms.ss.opt4[[1]],#
                                                 name = "ms.ss" )#
#
make_MCMC_comparison_pages(ms.ss.occ.all,#
                           dir=file.path(save.dir, "../figures/comparisons"))#
## look at samples#
#
checkChains(ms.ss.occ.all[[1]]$samples,#
            f.path = file.path(save.dir,#
            "../figures/chains/%s.pdf")#
)#
## ****************************************#
## custom figs#
## ****************************************#
#
by.param <- apply(ms.ss.occ.all[[1]]$samples, c(1,2), effectiveSize)#
by.config <- ms.ss.occ.all[[1]]$efficiency#
#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj=0.03)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj=0.03)
Q
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj=0.03)
quartz()
plot(NA, ylim=range(eff.param), xlim=c(1, ncol(eff.param)))
eff.param
for(i in 1:nrow(eff.param)){#
      points(x=1:ncol(eff.param), y=eff.param[i,], col=cols[i],#
             pch=16,#
             xaxt="n")#
    }
text(x=1:ncol(eff.param), par('usr')[3] - adj,#
         srt = 45, adj = 1,#
         labels = colnames(eff.param),#
         xpd = NA,#
         cex=1)
adj2=0.6
plot(NA, ylim=range(eff.param), xlim=c(1, ncol(eff.param)),#
         xlab="", ylab="", xaxt="n")#
    for(i in 1:nrow(eff.param)){#
      points(x=1:ncol(eff.param), y=eff.param[i,], col=cols[i],#
             pch=16,#
             xaxt="n")#
    }
text(x=1:ncol(eff.param), par('usr')[3] - adj2,#
         srt = 45, adj = 1,#
         labels = colnames(eff.param),#
         xpd = NA,#
         cex=1)
adj2=0.7
text(x=1:ncol(eff.param), par('usr')[3] - adj2,#
         srt = 45, adj = 1,#
         labels = colnames(eff.param),#
         xpd = NA,#
         cex=1)
Q
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj=0.03)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj1=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
?effectiveSize
## compare mcmcs#
ms.ss.occ.all <- combine_MCMC_comparison_results(ms.ss.orig[[1]],#
                                                 ms.ss.opt1[[1]],#
                                                 ms.ss.opt2[[1]],#
                                                 ## ms.ss.opt3[[1]],#
                                                 ## ms.ss.opt4[[1]],#
                                                 name = "ms.ss",#
                                                 includeEfficiency=TRUE)
?compareMCMC
?compareMCMCs
?combine_MCMC_comparison_results
MCMCefficiencyOHList
MCMCefficiencyOHlist
MCMCefficiencyHOlist
nimble:::MCMCefficiencyHOlist
MCMCefficiencyHOlist(ms.ss.occ.all)
nimble:::MCMCefficiencyHOlist(ms.ss.occ.all)
nimble:::MCMCefficiencyHOlist(ms.ss.occ.all$samples)
dim\
dimnames(ms.ss.occ.all$samples)[[1]]
ms.ss.occ.all$samples
ms.ss.occ.all[[1]]$samples
nimble:::MCMCefficiencyHOlist(ms.ss.occ.all[[1]])
nimble:::MCMCefficiencyHOlist
MCMCefficiencyHO
nimble:::MCMCefficiencyHO
nimble:::MCMCefficiencyHO(ms.ss.occ.all[[1]])
nimble:::MCMCefficiencyHOlist(ms.ss.occ.all[[1]]))
nimble:::MCMCefficiencyHOlist(ms.ss.occ.all[[1]])
names(ms.ss.occ.all)
names(ms.ss.occ.all[[1]])
ms.ss.occ.all$efficiency
ms.ss.occ.all[[1]]$efficiency
ms.ss.occ.all[[1]]$timing
nimble::ESSfunction
nimble:::ESSfunction
?effectiveSize
?effectiveSize
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
library(RColorBrewer)#
#
pdf.f <- function(f, file, ...) {#
  cat(sprintf('Writing %s\n', file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
## function to plot values of parameters as a function of#
## iterations. Input is a MCMCcompare object#
#
checkChains <- function(all.mods.samps, f.path){#
  niter <- dim(all.mods.samps)[3]#
  params <- names(all.mods.samps[1,,1])#
  mods <- names(all.mods.samps[,1,1])#
  if(is.null(mods)) mods <- "nimble"#
#
  lapply(mods, function(z){#
    f <- function(){#
      layout(matrix(1:4, ncol=2))#
#
      apply(all.mods.samps[z,,], 1, function(x){#
        plot(x, type="l",#
             xlab = 'iteration',#
             main= params[which(apply(all.mods.samps[z,,], 1, function(y)#
               all(match(x,y))))]#
             )#
      })#
    }#
#
    pdf.f(f,#
          file= file.path(sprintf(f.path, z)),#
          height=11, width=8.5)#
  })#
}#
plotEffSize <- function(eff.size, eff.param,#
                        f.path, name, at, adj1=0.5, adj2=0.7){#
  cols <- brewer.pal(length(eff.size$mean), "Greys")#
  f <- function(){#
    layout(matrix(1:2, ncol=1))#
    par(oma=c(5, 7.5, 0.5, 1),#
        mar=c(0.5, 0, 3, 1), cex.axis=1.5)#
    ## barplots#
    mp1 <- barplot(eff.size$mean, names="", las=1, col=cols)#
    mtext("Mean", 3, line=0.5, cex=1.5)#
#
    mp2 <- barplot(eff.size$min, names="", las=1, col=cols)#
    text(mp2, par('usr')[3] - adj1,#
         srt = 45, adj = 1,#
         labels = names(eff.size$mean),#
         xpd = NA,#
         cex=1)#
#
    mtext("Minimum", 3, line=0.5, cex=1.5)#
    mtext("Effective sample size \n per second",#
          2, line=4.5, cex=1.5, at=at)#
  }#
#
  f2 <- function(){#
    layout(matrix(1, ncol=1))#
    par(oma=c(5, 7.5, 0.5, 1),#
        mar=c(0.5, 0, 3, 1), cex.axis=1.5)#
    plot(NA, ylim=range(eff.param), xlim=c(1, ncol(eff.param)),#
         xlab="", ylab="", xaxt="n")#
    for(i in 1:nrow(eff.param)){#
      points(x=1:ncol(eff.param), y=eff.param[i,], col=cols[i],#
             pch=16,#
             xaxt="n")#
    }#
    text(x=1:ncol(eff.param), par('usr')[3] - adj2,#
         srt = 45, adj = 1,#
         labels = colnames(eff.param),#
         xpd = NA,#
         cex=1)#
  }#
  pdf.f(f,#
        file= file.path(sprintf(f.path, name, "Bar")),#
        height=6, width=4.5)#
  pdf.f(f2,#
        file= file.path(sprintf(f.path, name, "Points")),#
        height=4, width=4.5)#
}
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
library(RColorBrewer)#
#
pdf.f <- function(f, file, ...) {#
  cat(sprintf('Writing %s\n', file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
## function to plot values of parameters as a function of#
## iterations. Input is a MCMCcompare object#
#
checkChains <- function(all.mods.samps, f.path){#
  niter <- dim(all.mods.samps)[3]#
  params <- names(all.mods.samps[1,,1])#
  mods <- names(all.mods.samps[,1,1])#
  if(is.null(mods)) mods <- "nimble"#
#
  lapply(mods, function(z){#
    f <- function(){#
      layout(matrix(1:4, ncol=2))#
#
      apply(all.mods.samps[z,,], 1, function(x){#
        plot(x, type="l",#
             xlab = 'iteration',#
             main= params[which(apply(all.mods.samps[z,,], 1, function(y)#
               all(match(x,y))))]#
             )#
      })#
    }#
#
    pdf.f(f,#
          file= file.path(sprintf(f.path, z)),#
          height=11, width=8.5)#
  })#
}#
plotEffSize <- function(eff.size, eff.param,#
                        f.path, name, at, adj1=0.5, adj2=0.7){#
  cols <- brewer.pal(length(eff.size$mean), "Greys")#
  f <- function(){#
    layout(matrix(1:2, ncol=1))#
    par(oma=c(5, 7.5, 0.5, 1),#
        mar=c(0.5, 0, 3, 1), cex.axis=1.5)#
    ## barplots#
    mp1 <- barplot(eff.size$mean, names="", las=1, col=cols)#
    mtext("Mean", 3, line=0.5, cex=1.5)#
#
    mp2 <- barplot(eff.size$min, names="", las=1, col=cols)#
    text(mp2, par('usr')[3] - adj1,#
         srt = 45, adj = 1,#
         labels = names(eff.size$mean),#
         xpd = NA,#
         cex=1)#
#
    mtext("Minimum", 3, line=0.5, cex=1.5)#
    mtext("Effective sample size \n per second",#
          2, line=4.5, cex=1.5, at=at)#
  }#
#
  f2 <- function(){#
    layout(matrix(1, ncol=1))#
    par(oma=c(5, 7.5, 0.5, 1),#
        mar=c(0.5, 0, 3, 1), cex.axis=1.5)#
    plot(NA, ylim=range(eff.param), xlim=c(1, ncol(eff.param)),#
         xlab="", ylab="", xaxt="n")#
    for(i in 1:nrow(eff.param)){#
      points(x=1:ncol(eff.param), y=eff.param[i,], col=cols[i],#
             pch=16,#
             xaxt="n")#
    }#
    text(x=1:ncol(eff.param), par('usr')[3] - adj2,#
         srt = 45, adj = 1,#
         labels = colnames(eff.param),#
         xpd = NA,#
         cex=1)#
    mtext("Effective sample size \n per second",#
          2, line=4.5, cex=1.5)#
  }#
  pdf.f(f,#
        file= file.path(sprintf(f.path, name, "Bar")),#
        height=6, width=4.5)#
  pdf.f(f2,#
        file= file.path(sprintf(f.path, name, "Points")),#
        height=4, width=4.5)#
}
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
library(RColorBrewer)#
#
pdf.f <- function(f, file, ...) {#
  cat(sprintf('Writing %s\n', file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
## function to plot values of parameters as a function of#
## iterations. Input is a MCMCcompare object#
#
checkChains <- function(all.mods.samps, f.path){#
  niter <- dim(all.mods.samps)[3]#
  params <- names(all.mods.samps[1,,1])#
  mods <- names(all.mods.samps[,1,1])#
  if(is.null(mods)) mods <- "nimble"#
#
  lapply(mods, function(z){#
    f <- function(){#
      layout(matrix(1:4, ncol=2))#
#
      apply(all.mods.samps[z,,], 1, function(x){#
        plot(x, type="l",#
             xlab = 'iteration',#
             main= params[which(apply(all.mods.samps[z,,], 1, function(y)#
               all(match(x,y))))]#
             )#
      })#
    }#
#
    pdf.f(f,#
          file= file.path(sprintf(f.path, z)),#
          height=11, width=8.5)#
  })#
}#
plotEffSize <- function(eff.size, eff.param,#
                        f.path, name, at, adj1=0.5, adj2=0.7){#
  cols <- brewer.pal(length(eff.size$mean), "Greys")#
  f <- function(){#
    layout(matrix(1:2, ncol=1))#
    par(oma=c(5, 7.5, 0.5, 1),#
        mar=c(0.5, 0, 3, 1), cex.axis=1.5)#
    ## barplots#
    mp1 <- barplot(eff.size$mean, names="", las=1, col=cols)#
    mtext("Mean", 3, line=0.5, cex=1.5)#
#
    mp2 <- barplot(eff.size$min, names="", las=1, col=cols)#
    text(mp2, par('usr')[3] - adj1,#
         srt = 45, adj = 1,#
         labels = names(eff.size$mean),#
         xpd = NA,#
         cex=1)#
#
    mtext("Minimum", 3, line=0.5, cex=1.5)#
    mtext("Effective sample size \n per second",#
          2, line=4.5, cex=1.5, at=at)#
  }#
#
  f2 <- function(){#
    layout(matrix(1, ncol=1))#
    par(oma=c(5, 7.5, 0.5, 1),#
        mar=c(0.5, 0, 3, 1), cex.axis=1.5)#
    plot(NA, ylim=range(eff.param), xlim=c(1, ncol(eff.param)),#
         xlab="", ylab="", xaxt="n")#
    for(i in 1:nrow(eff.param)){#
      points(x=1:ncol(eff.param), y=eff.param[i,], col=cols[i],#
             pch=16,#
             xaxt="n")#
    }#
    text(x=1:ncol(eff.param), par('usr')[3] - adj2,#
         srt = 45, adj = 1,#
         labels = colnames(eff.param),#
         xpd = NA,#
         cex=1)#
    mtext("Effective sample size \n per second",#
          2, line=4.5, cex=1.5)#
  }#
  pdf.f(f,#
        file= file.path(sprintf(f.path, name, "Bar")),#
        height=6, width=4.5)#
  pdf.f(f2,#
        file= file.path(sprintf(f.path, name, "Points")),#
        height=4, width=4.5)#
}
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.07)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.5)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.8)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
?legend
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=0.1)
by.config
by.param
rm(list=ls())#
library(nimble)#
setwd("~/Dropbox/nimble/occupancy/analysis/singleSpp-multiSea")#
source('../all/plotting.R')#
save.dir <- "../../../saved/singleSpp-multiSea/saved"#
#
## original model jags and nimble#
load(file=file.path(save.dir, "orig.Rdata"))#
#
## custom sampler for zs, slice for other parms#
load(file=file.path(save.dir, "opt2.Rdata"))#
#
## custom function for latent state#
load(file=file.path(save.dir, "opt4.Rdata"))#
#
## costum function for latent state + block samplers on phi[i-1],#
## gamma[i-1]#
load(file=file.path(save.dir, "opt5.Rdata")) #
#
## rename results#
#
ss.ms.orig[[1]] <- rename_MCMC_comparison_method(c('nimble', 'jags'),#
                                                 c('NIMBLE-latent',#
                                                   'JAGS-latent'),#
                                                 comparison=ss.ms.orig[[1]])#
ss.ms.opt2[[1]] <- rename_MCMC_comparison_method('nimbleOpt2',#
                                                 'slice',#
                                                 comparison=ss.ms.opt2[[1]])#
#
ss.ms.opt4[[1]] <- rename_MCMC_comparison_method(c('nimble',#
                                                   'autoBlock',#
                                                   'nimble_slice'),#
                                                 c('filter',#
                                                   'filter + autoblock',#
                                                   'filter + slice'),#
                                                 comparison=ss.ms.opt4[[1]])#
#
## ss.ms.opt5[[1]] <- rename_MCMC_comparison_method('nimbleOpt5',#
##                                                  'block phi gam',#
##                                                  comparison=ss.ms.opt5[[1]])#
## compare mcmcs#
ss.ms.occ.all <- combine_MCMC_comparison_results(ss.ms.orig[[1]],#
                                                 ## ss.ms.opt2[[1]],#
                                                 ss.ms.opt4[[1]],#
                                                 ## ss.ms.opt5[[1]],#
                                                 name = "ss.ms" )#
#
make_MCMC_comparison_pages(ss.ms.occ.all,#
                           dir=file.path(save.dir, "../figures/comparisons"))#
checkChains(ss.ms.occ.all[[1]]$samples,#
            f.path = file.path(save.dir,#
              "../figures/chains/%s.pdf")#
            )#
#
## ****************************************#
## custom figs#
## ****************************************#
## ****************************************#
## custom figs#
## ****************************************#
#
by.param <- apply(ms.ss.occ.all[[1]]$samples, c(1,2), effectiveSize)#
by.config <- ms.ss.occ.all[[1]]$efficiency#
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=0.4, adj1=0.03, adj2=0.1)
by.param <- apply(ss.ms.occ.all[[1]]$samples, c(1,2), effectiveSize)#
by.config <- ss.ms.occ.all[[1]]$efficiency#
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=0.4, adj1=0.03, adj2=0.1)
by.param <- apply(ss.ms.occ.all[[1]]$samples, c(1,2), effectiveSize)#
by.config <- ss.ms.occ.all[[1]]$efficiency
by.param <- apply(ss.ms.occ.all[[1]]$samples, c(1,2), effectiveSize)#
by.config <- ss.ms.occ.all[[1]]$efficiency
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=0.4, adj1=0.03, adj2=0.1)
by.config
by.param
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=9, adj1=0.04, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=0.4, adj1=0.03, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.04, adj2=0.1)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.04, adj2=0.2)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.04, adj2=0.2)
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.04, adj2=0.3, widths=c(4.5, 6.5))
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.05, adj2=0.3, widths=c(4.5, 7))
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.1, adj2=0.3, widths=c(4.5, 7))
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.1, adj2=0.3, widths=c(4.5, 15))
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.1, adj2=0.3, widths=c(4.5, 8))
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.1, adj2=0.3, widths=c(4.5, 8.5))
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.1, adj2=0.3, widths=c(4.5, 8.5))
?effectiveSize
ss.ms.occ.all[[1]]$timing
by.param/ss.ms.occ.all[[1]]$timing
by.param <- by.param/ss.ms.occ.all[[1]]$timing
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "SingleSpp-MultiSea",#
            at=9, adj1=0.1, adj2=0.3, widths=c(4.5, 8.5))
rm(list=ls())#
#
library(nimble)#
library(coda)#
#
setwd('~/Dropbox/nimble/occupancy/analysis/multiSpp-singleSea')#
source('../all/plotting.R')#
save.dir <-  "../../../saved/multiSpp-singleSea/saved"#
#
## original model jags and nimble#
load(file=file.path(save.dir, "orig.Rdata"))#
#
## vectorized, likelihood for latent state, derived quantity#
## calculation#
load(file=file.path(save.dir, "opt1.Rdata"))#
#
## option 1 + custom block sampler on species random effect for each#
## species#
load(file=file.path(save.dir, "opt2.Rdata"))#
#
## ## option 1 + custom block sampler on species random effect for each#
## ## random effect type#
## load(file=file.path(save.dir, "opt3.Rdata")#
#
## option 1 + sigma sampler on random effects#
load(file=file.path(save.dir, "opt4.Rdata"))#
ms.ss.orig[[1]] <- rename_MCMC_comparison_method(c('nimble', 'jags'),#
                                                 c('NIMBLE-latent',#
                                                   'JAGS-latent'),#
                                                 comparison=ms.ss.orig[[1]])#
#
ms.ss.opt1[[1]] <- rename_MCMC_comparison_method(c('nimble',#
                                                   "autoBlock"),#
                                                 c('filter',#
                                                   'filter + autoblock'),#
                                                 comparison=ms.ss.opt1[[1]])#
ms.ss.opt2[[1]] <- rename_MCMC_comparison_method('nimbleOpt2',#
                                                 'filter + sp. block',#
                                                 comparison=ms.ss.opt2[[1]])#
## ms.ss.opt3[[1]] <- rename_MCMC_comparison_method('nimbleOpt3',#
##                                                  'block_2',#
##                                                  comparison=ms.ss.opt3[[1]])#
ms.ss.opt4[[1]] <- rename_MCMC_comparison_method('nimbleOpt4',#
                                                 'sigma sampler',#
                                                 comparison=ms.ss.opt4[[1]])#
#
## compare mcmcs#
ms.ss.occ.all <- combine_MCMC_comparison_results(ms.ss.orig[[1]],#
                                                 ms.ss.opt1[[1]],#
                                                 ms.ss.opt2[[1]],#
                                                 ## ms.ss.opt3[[1]],#
                                                 ## ms.ss.opt4[[1]],#
                                                 name = "ms.ss"))#
#
make_MCMC_comparison_pages(ms.ss.occ.all,#
                           dir=file.path(save.dir, "../figures/comparisons"))#
## look at samples#
#
checkChains(ms.ss.occ.all[[1]]$samples,#
            f.path = file.path(save.dir,#
            "../figures/chains/%s.pdf")#
)#
## ****************************************#
## custom figs#
## ****************************************#
#
by.param <- apply(ms.ss.occ.all[[1]]$samples, c(1,2), effectiveSize)/#
  ms.ss.occ.all[[1]]$timing #
by.config <- ms.ss.occ.all[[1]]$efficiency#
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=1.1)
rm(list=ls())#
#
library(nimble)#
library(coda)#
#
setwd('~/Dropbox/nimble/occupancy/analysis/multiSpp-singleSea')#
source('../all/plotting.R')#
save.dir <-  "../../../saved/multiSpp-singleSea/saved"#
#
## original model jags and nimble#
load(file=file.path(save.dir, "orig.Rdata"))#
#
## vectorized, likelihood for latent state, derived quantity#
## calculation#
load(file=file.path(save.dir, "opt1.Rdata"))#
#
## option 1 + custom block sampler on species random effect for each#
## species#
load(file=file.path(save.dir, "opt2.Rdata"))#
#
## ## option 1 + custom block sampler on species random effect for each#
## ## random effect type#
## load(file=file.path(save.dir, "opt3.Rdata")#
#
## option 1 + sigma sampler on random effects#
load(file=file.path(save.dir, "opt4.Rdata"))#
ms.ss.orig[[1]] <- rename_MCMC_comparison_method(c('nimble', 'jags'),#
                                                 c('NIMBLE-latent',#
                                                   'JAGS-latent'),#
                                                 comparison=ms.ss.orig[[1]])#
#
ms.ss.opt1[[1]] <- rename_MCMC_comparison_method(c('nimble',#
                                                   "autoBlock"),#
                                                 c('filter',#
                                                   'filter + autoblock'),#
                                                 comparison=ms.ss.opt1[[1]])#
ms.ss.opt2[[1]] <- rename_MCMC_comparison_method('nimbleOpt2',#
                                                 'filter + sp. block',#
                                                 comparison=ms.ss.opt2[[1]])#
## ms.ss.opt3[[1]] <- rename_MCMC_comparison_method('nimbleOpt3',#
##                                                  'block_2',#
##                                                  comparison=ms.ss.opt3[[1]])#
ms.ss.opt4[[1]] <- rename_MCMC_comparison_method('nimbleOpt4',#
                                                 'sigma sampler',#
                                                 comparison=ms.ss.opt4[[1]])#
#
## compare mcmcs#
ms.ss.occ.all <- combine_MCMC_comparison_results(ms.ss.orig[[1]],#
                                                 ms.ss.opt1[[1]],#
                                                 ms.ss.opt2[[1]],#
                                                 ## ms.ss.opt3[[1]],#
                                                 ## ms.ss.opt4[[1]],#
                                                 name = "ms.ss"))#
#
make_MCMC_comparison_pages(ms.ss.occ.all,#
                           dir=file.path(save.dir, "../figures/comparisons"))#
## look at samples#
#
checkChains(ms.ss.occ.all[[1]]$samples,#
            f.path = file.path(save.dir,#
            "../figures/chains/%s.pdf")#
)#
## ****************************************#
## custom figs#
## ****************************************#
#
by.param <- apply(ms.ss.occ.all[[1]]$samples, c(1,2), effectiveSize)/#
  ms.ss.occ.all[[1]]$timing #
by.config <- ms.ss.occ.all[[1]]$efficiency#
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=1.1)
make_MCMC_comparison_pages(ms.ss.occ.all,#
                           dir=file.path(save.dir, "../figures/comparisons"))#
## look at samples#
#
checkChains(ms.ss.occ.all[[1]]$samples,#
            f.path = file.path(save.dir,#
            "../figures/chains/%s.pdf")#
)#
## ****************************************#
## custom figs#
## ****************************************#
#
by.param <- apply(ms.ss.occ.all[[1]]$samples, c(1,2), effectiveSize)/#
  ms.ss.occ.all[[1]]$timing #
by.config <- ms.ss.occ.all[[1]]$efficiency#
source('../all/plotting.R')#
plotEffSize(by.config, by.param, f.path= file.path(save.dir,#
              "../figures/comparisons/%s%s.pdf"), "MultiSpp-SingleSea",#
            at=0.4, adj1=0.03, adj2=1.1)
